name: "Project: PR merged on main -> Done"

on:
  pull_request:
    types: [closed]

jobs:
  set-done:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    env:
      OWNER: jaygtel
      PROJECT_TITLE: "Jays Website"
      CONTENT_ID: ${{ github.event.pull_request.node_id }}
      GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}
    steps:
      - name: Resolve project number by title
        id: resolve
        run: |
          PN=$(gh project list --owner "$OWNER" --format json --jq '.[] | select(.title==env.PROJECT_TITLE) | .number')
          [ -z "$PN" ] && { echo "Project titled '$PROJECT_TITLE' not found for $OWNER"; exit 1; }
          echo "project_number=$PN" >> "$GITHUB_OUTPUT"

      - name: Fetch project + Status/Done IDs
        id: ids
        run: |
          gh api graphql -f query='
            query($login:String!, $number:Int!){
              user(login:$login){
                projectV2(number:$number){
                  id
                  fields(first:50){
                    nodes{
                      ... on ProjectV2SingleSelectField {
                        id name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }' -f login="$OWNER" -F number="${{ steps.resolve.outputs.project_number }}" > project.json

          echo "project_id=$(jq -r .data.user.projectV2.id project.json)" >> "$GITHUB_OUTPUT"
          echo "status_field_id=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name==\"Status\") | .id' project.json)" >> "$GITHUB_OUTPUT"
          echo "done_id=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name==\"Status\") | .options[] | select(.name==\"Done\") | .id' project.json)" >> "$GITHUB_OUTPUT"

      - name: Ensure PR exists in project & get item id
        id: item
        run: |
          NEW_ID=$(gh api graphql -f query='
            mutation($project:ID!, $content:ID!){
              addProjectV2ItemById(input:{projectId:$project, contentId:$content}) {
                item { id }
              }
            }' -f project="${{ steps.ids.outputs.project_id }}" -f content="$CONTENT_ID" --jq '.data.addProjectV2ItemById.item.id' || true)

          if [ -n "$NEW_ID" ]; then
            ITEM_ID="$NEW_ID"
          else
            ITEM_ID=$(gh api graphql -f query='
              query($login:String!, $number:Int!){
                user(login:$login){
                  projectV2(number:$number){
                    items(first:200){
                      nodes{ id content { ... on PullRequest { id } } }
                    }
                  }
                }
              }' -f login="$OWNER" -F number="${{ steps.resolve.outputs.project_number }}" \
              --jq ".data.user.projectV2.items.nodes[] | select(.content.id==\"$CONTENT_ID\") | .id")
          fi

          [ -n "$ITEM_ID" ] || { echo "Could not resolve item id"; exit 1; }
          echo "item_id=$ITEM_ID" >> "$GITHUB_OUTPUT"

      - name: Set Status = Done
        run: |
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $opt:String!){
              updateProjectV2ItemFieldValue(
                input:{projectId:$project, itemId:$item, fieldId:$field, value:{singleSelectOptionId:$opt}}
              ){ projectV2Item { id } }
            }' \
            -f project="${{ steps.ids.outputs.project_id }}" \
            -f item="${{ steps.item.outputs.item_id }}" \
            -f field="${{ steps.ids.outputs.status_field_id }}" \
            -f opt="${{ steps.ids.outputs.done_id }}"
