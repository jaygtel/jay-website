name: "Project: Issue assigned -> To Do"

on:
  issues:
    types: [assigned]

jobs:
  set-todo:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
    env:
      OWNER: "jaygtel"
      PROJECT_NUMBER: "6"
      CONTENT_ID: ${{ github.event.issue.node_id }}
      GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}  # PAT classic with 'project' scope
    steps:
      - name: Fetch project + Status/To Do IDs
        id: ids
        run: |
          gh api graphql -f query='
            query($login:String!, $number:Int!){
              user(login:$login){
                projectV2(number:$number){
                  id
                  fields(first:50){
                    nodes{
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }' -f login="$OWNER" -F number="$PROJECT_NUMBER" > project.json

          echo "project_id=$(jq -r .data.user.projectV2.id project.json)" >> "$GITHUB_OUTPUT"
          echo "status_field_id=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name==\"Status\") | .id' project.json)" >> "$GITHUB_OUTPUT"
          echo "todo_id=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name==\"Status\") | .options[] | select(.name==\"To Do\" or .name==\"Todo\" or .name==\"To do\") | .id' project.json)" >> "$GITHUB_OUTPUT"

      - name: Ensure issue exists in project & get item id
        id: item
        run: |
          NEW_ID=$(gh api graphql -f query='
            mutation($project:ID!, $content:ID!){
              addProjectV2ItemById(input:{projectId:$project, contentId:$content}) {
                item { id }
              }
            }' -f project="${{ steps.ids.outputs.project_id }}" -f content="$CONTENT_ID" --jq '.data.addProjectV2ItemById.item.id' || true)

          if [ -n "$NEW_ID" ]; then
            ITEM_ID="$NEW_ID"
          else
            ITEM_ID=$(gh api graphql -f query='
              query($login:String!, $number:Int!){
                user(login:$login){
                  projectV2(number:$number){
                    items(first:200){
                      nodes{ id content { ... on Issue { id } } }
                    }
                  }
                }
              }' -f login="$OWNER" -F number="$PROJECT_NUMBER" \
              --jq ".data.user.projectV2.items.nodes[] | select(.content.id==\"$CONTENT_ID\") | .id")
          fi

          [ -z "$ITEM_ID" ] && { echo "Could not resolve item id"; exit 1; }
          echo "item_id=$ITEM_ID" >> "$GITHUB_OUTPUT"

      - name: Set Status = To Do
        run: |
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $opt:String!){
              updateProjectV2ItemFieldValue(
                input:{projectId:$project, itemId:$item, fieldId:$field, value:{singleSelectOptionId:$opt}}
              ){ projectV2Item { id } }
            }' \
            -f project="${{ steps.ids.outputs.project_id }}" \
            -f item="${{ steps.item.outputs.item_id }}" \
            -f field="${{ steps.ids.outputs.status_field_id }}" \
            -f opt="${{ steps.ids.outputs.todo_id }}"
