name: "Project: Issue assigned -> To Do"

on:
  issues:
    types: [assigned]

jobs:
  set-todo:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
    env:
      OWNER: jaygtel
      PROJECT_TITLE: "Jays Website"
      CONTENT_ID: ${{ github.event.issue.node_id }}
      GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}  # PAT classic with 'project' scope
    steps:
      - name: Resolve project number by title
        run: |
          PN=$(gh project list --owner "$OWNER" --format json --jq '.[] | select(.title==env.PROJECT_TITLE) | .number')
          [ -z "$PN" ] && { echo "Project titled '$PROJECT_TITLE' not found for $OWNER"; exit 1; }
          echo "PROJECT_NUMBER=$PN" >> $GITHUB_ENV

      - name: Fetch project + Status/To Do IDs
        run: |
          gh api graphql -f query='
            query($login:String!, $number:Int!){
              user(login:$login){
                projectV2(number:$number){
                  id
                  fields(first:50){
                    nodes{
                      ... on ProjectV2SingleSelectField {
                        id name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }' -f login="$OWNER" -F number="$PROJECT_NUMBER" > project.json
          echo "PROJECT_ID=$(jq -r .data.user.projectV2.id project.json)" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name==\"Status\") | .id' project.json)" >> $GITHUB_ENV
          echo "TODO_OPT_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name==\"Status\") | .options[] | select(.name==\"To Do\" or .name==\"Todo\" or .name==\"To do\") | .id' project.json)" >> $GITHUB_ENV

      - name: Ensure issue exists in project (capture item id if newly added)
        run: |
          NEW_ID=$(gh api graphql -f query='
            mutation($project:ID!, $content:ID!){
              addProjectV2ItemById(input:{projectId:$project, contentId:$content}) {
                item { id }
              }
            }' -f project="$PROJECT_ID" -f content="$CONTENT_ID" --jq '.data.addProjectV2ItemById.item.id' || true)
          [ -n "$NEW_ID" ] && echo "ITEM_ID=$NEW_ID" >> $GITHUB_ENV

      - name: Find project item id if not new
        if: env.ITEM_ID == ''
        run: |
          gh api graphql -f query='
            query($login:String!, $number:Int!){
              user(login:$login){
                projectV2(number:$number){
                  items(first:200){
                    nodes{ id content { ... on Issue { id } } }
                  }
                }
              }
            }' -f login="$OWNER" -F number="$PROJECT_NUMBER" \
            --jq ".data.user.projectV2.items.nodes[] | select(.content.id==\"$CONTENT_ID\") | .id" > item_id.txt
          echo "ITEM_ID=$(cat item_id.txt)" >> $GITHUB_ENV

      - name: Set Status = To Do
        run: |
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $opt:String!){
              updateProjectV2ItemFieldValue(
                input:{projectId:$project, itemId:$item, fieldId:$field, value:{singleSelectOptionId:$opt}}
              ){ projectV2Item { id } }
            }' -f project="$PROJECT_ID" -f item="$ITEM_ID" -f field="$STATUS_FIELD_ID" -f opt="$TODO_OPT_ID"
