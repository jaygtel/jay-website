name: "Project: Issue assigned -> To Do"

on:
  issues:
    types: [assigned]

jobs:
  set-todo:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
    env:
      OWNER: "jaygtel"
      PROJECT_NUMBER: "6"
      CONTENT_ID: ${{ github.event.issue.node_id }}
      GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}  # PAT classic with 'project' scope
    steps:
      - name: Fetch project fields
        id: get_fields
        run: |
          set -euo pipefail
          gh api graphql -f query='
            query($login:String!, $number:Int!){
              user(login:$login){
                projectV2(number:$number){
                  id
                  fields(first:100){
                    nodes{
                      __typename
                      ... on ProjectV2FieldCommon { id name }
                      ... on ProjectV2SingleSelectField {
                        id name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }' -f login="$OWNER" -F number="$PROJECT_NUMBER" > project.json

          echo "project_id=$(jq -r .data.user.projectV2.id project.json)" >> "$GITHUB_OUTPUT"

          echo "== Available fields ==" 
          jq -r '
            .data.user.projectV2.fields.nodes[]
            | if .__typename=="ProjectV2SingleSelectField"
                then "SINGLE_SELECT\t\(.name)\t\(.id)\t[" + ((.options // [] | map(.name) | join(", "))) + "]"
                else "OTHER\t\(.name)\t\(.id)"
              end
          ' project.json

          # Try literal "Status" first
          STATUS_FIELD_ID=$(jq -r '
            .data.user.projectV2.fields.nodes[]
            | select(.__typename=="ProjectV2SingleSelectField" and .name=="Status")
            | .id
          ' project.json | head -n1)

          if [ -z "${STATUS_FIELD_ID:-}" ]; then
            # Auto-detect a single-select field that has options like To Do / In Progress / Done
            STATUS_FIELD_ID=$(jq -r '
              [ .data.user.projectV2.fields.nodes[]
                | select(.__typename=="ProjectV2SingleSelectField")
                | {id, name, opts: [ (.options // [])[]?.name | ascii_downcase ] }
              ]
              | map(select(
                  ((.opts | index("to do")) or (.opts | index("todo")) or (.opts | index("to-do")))
                  and ((.opts | index("in progress")) or (.opts | index("in-progress")))
                  and ((.opts | index("done")))
                ))
              | .[0].id // empty
            ' project.json)
          fi

          if [ -z "${STATUS_FIELD_ID:-}" ]; then
            echo "::error::Could not find a single-select Status field (with options like To Do / In Progress / Done)."
            exit 1
          fi
          echo "status_field_id=$STATUS_FIELD_ID" >> "$GITHUB_OUTPUT"

          # Resolve option IDs (tolerate common variants/casing)
          TODO_ID=$(jq -r --arg FIELD "$STATUS_FIELD_ID" '
            .data.user.projectV2.fields.nodes[]
            | select(.id==$FIELD)
            | (.options // [])[]
            | select((.name | ascii_downcase)=="to do" or (.name | ascii_downcase)=="todo" or (.name | ascii_downcase)=="to-do")
            | .id
          ' project.json | head -n1)

          if [ -z "${TODO_ID:-}" ]; then
            echo "::error::Could not find a To Do option on Status field."
            exit 1
          fi
          echo "todo_id=$TODO_ID" >> "$GITHUB_OUTPUT"

      - name: Ensure issue exists in project & get item id
        id: item
        run: |
          set -euo pipefail
          NEW_ID=$(gh api graphql -f query='
            mutation($project:ID!, $content:ID!){
              addProjectV2ItemById(input:{projectId:$project, contentId:$content}) {
                item { id }
              }
            }' -f project="${{ steps.get_fields.outputs.project_id }}" -f content="$CONTENT_ID" --jq '.data.addProjectV2ItemById.item.id' || true)

          if [ -n "${NEW_ID:-}" ]; then
            ITEM_ID="$NEW_ID"
          else
            ITEM_ID=$(gh api graphql -f query='
              query($login:String!, $number:Int!){
                user(login:$login){
                  projectV2(number:$number){
                    items(first:200){
                      nodes{ id content { ... on Issue { id } } }
                    }
                  }
                }
              }' -f login="$OWNER" -F number="$PROJECT_NUMBER" \
              --jq ".data.user.projectV2.items.nodes[] | select(.content.id==\"$CONTENT_ID\") | .id")
          fi

          if [ -z "${ITEM_ID:-}" ]; then
            echo "::error::Could not resolve project item id for this issue."
            exit 1
          fi
          echo "item_id=$ITEM_ID" >> "$GITHUB_OUTPUT"

      - name: Set Status = To Do
        run: |
          set -euo pipefail
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $opt:String!){
              updateProjectV2ItemFieldValue(
                input:{projectId:$project, itemId:$item, fieldId:$field, value:{singleSelectOptionId:$opt}}
              ){ projectV2Item { id } }
            }' \
            -f project="${{ steps.get_fields.outputs.project_id }}" \
            -f item="${{ steps.item.outputs.item_id }}" \
            -f field="${{ steps.get_fields.outputs.status_field_id }}" \
            -f opt="${{ steps.get_fields.outputs.todo_id }}"
